#include <mictcp.h>
#include <api/mictcp_core.h>

const int N = 10;
int t[N]={1,1,1,1,1,1,1,1,1,1};
int propdu=0;
mic_tcp_sock sock;
mic_tcp_sock_addr sock_addr;
unsigned int TE=0; //trame emis
unsigned int TA=0; //trame recu
double perte;
double perte_admis=0.3;
int lr=30;
/*
 * Permet de créer un socket entre l’application et MIC-TCP
 * Retourne le descripteur du socket ou bien -1 en cas d'erreur
 */
int mic_tcp_socket(start_mode sm)
{
   int result = -1;
   printf("[MIC-TCP] Appel de la fonction: ");
   printf(__FUNCTION__); 
   printf("\n");
   result = initialize_components(sm);    /* Appel obligatoire */
   if (result!=-1){
   sock.fd=0 
   set_loss_rate(lr);

   return sock.fd ;
   }
   else return -1;
}

/*
 * Permet d’attribuer une adresse à un socket.
 * Retourne 0 si succès, et -1 en cas d’échec
 */
int mic_tcp_bind(int socket, mic_tcp_sock_addr addr)
{
   printf("[MIC-TCP] Appel de la fonction: ");
   printf(__FUNCTION__); 
   printf("\n");
   if (sock.fd==socket) {
        sock.addr=addr;
        return 0;
        }
     else
        {
        return -1;
        }
}

/*
 * Met le socket en état d'acceptation de connexions
 * Retourne 0 si succès, -1 si erreur
 */
int mic_tcp_accept(int socket, mic_tcp_sock_addr* addr)
{
    printf("[MIC-TCP] Appel de la fonction: "); 
    printf(__FUNCTION__); 
    printf("\n");
    return -1;
}

/*
 * Permet de réclamer l’établissement d’une connexion
 * Retourne 0 si la connexion est établie, et -1 en cas d’échec
 */
int mic_tcp_connect(int socket, mic_tcp_sock_addr addr)
{
    printf("[MIC-TCP] Appel de la fonction: ");
    printf(__FUNCTION__); 
    printf("\n");
    return -1;
}

/*
 * Permet de réclamer l’envoi d’une donnée applicative
 * Retourne la taille des données envoyées, et -1 en cas d'erreur
 */
int mic_tcp_send (int mic_sock, char* mesg, int mesg_size)
{
    printf("[MIC-TCP] Appel de la fonction: ");   
    printf(__FUNCTION__); 
    printf("\n");
    mic_tcp_pdu pdu;
    sock_addr=sock.addr;
    mic_tcp_pdu ack_pdu;
    int i;
    int taille_pdu;
    int ack_recv=0; // 1 si ack recu , 0 sinon
    int pdu_recu=0;
    unsigned int timeout=100;
    if (sock.fd==mic_sock){
        //construction du pdu
        pdu.header.dest_port=sock_addr.port;
        pdu.header.seq_num=TE;
        pdu.header.ack=0; //init champ ack
        TE= ( TE+1 ) % 2 ; //mise a jour du PE
        
        pdu.payload.data=mesg;
        pdu.payload.size=mesg_size;
        //envoi
        if ((taille_pdu= IP_send(pdu,sock_addr))==-1) {
            print("erreur envoi\n");
            exit(-1);
            }
        //attente du ack
        ack_pdu.payload.size=0;
        //boucle tant qu'on a pas recu de ack
        while (ack_recv==0) { 
            //verification (reception ack avant le timer expire) ET ( numero de sequence juste)
            if ((IP_recv(&(ack_pdu,&addr_sock,timeout)>=0)&&(ack_pdu.header.ack==1) && (ack_pdu.header.ack_num==TE)) {
                printf("ack recu avec TA = %d \n",TA);
                ack_recv=1;
                t[propdu]=1;
                propdu=(propdu+1)%N;
                }
            else if (IP_recv(&(ack_pdu,&addr_sock,timeout)<0)) {
                printf("time out expire\n");
                // on n'a pas recu de pdu car pas de ack dans le timeout
                t[propdu]=0;
                pdu_recu=0;
                //calcul pourcentage de perte
                for (i=0;i<N;i++){
                    pdu_recu+=t[i];
                    }
                printf("nbre de pdu recu: %d\n",pdu_recu);
                perte=(double)(N-pdu_recu)/(double)N;
                printf("perte calculée: %f\n",perte*100.0);
                if (perte<=perte_admis) {
                    printf("perte respectée\n");
                    ack_recv=1;
                    propdu=(propdu+1)%N;
                    TE= (TE+1)%2;
                    }
                else {
                    printf("perte n'est pas respectée, renvoi du pdu \n");
                    if ((taille_pdu=IP_send(pdu,sock_addr))==-1){
                        printf("erreur envoi pdu\n");
                        exit(-1);
                        }
                    }
                }
            else { printf("reception du mauvais numero de seq\n");}
            }
        }
    return taille_pdu;
}

/*
 * Permet à l’application réceptrice de réclamer la récupération d’une donnée
 * stockée dans les buffers de réception du socket
 * Retourne le nombre d’octets lu ou bien -1 en cas d’erreur
 * NB : cette fonction fait appel à la fonction app_buffer_get()
 */
int mic_tcp_recv (int socket, char* mesg, int max_mesg_size)
{
    printf("[MIC-TCP] Appel de la fonction: ");
    printf(__FUNCTION__); 
    printf("\n");
    int pdu_recu=-1;
    
    mic_tcp_payload pdu;
    pdu.data=mesg;
    pdu.size=max_mesg_size;
    if (sock.fd==socket)
        pdu_recu=app_buffer_get(pdu);
     
    
    return pdu_recu;
}

/*
 * Permet de réclamer la destruction d’un socket.
 * Engendre la fermeture de la connexion suivant le modèle de TCP.
 * Retourne 0 si tout se passe bien et -1 en cas d'erreur
 */
int mic_tcp_close (int socket)
{
    printf("[MIC-TCP] Appel de la fonction :  ");
    printf(__FUNCTION__); 
    printf("\n");
    return -1;
}

/*
 * Traitement d’un PDU MIC-TCP reçu (mise à jour des numéros de séquence
 * et d'acquittement, etc.) puis insère les données utiles du PDU dans
 * le buffer de réception du socket. Cette fonction utilise la fonction
 * app_buffer_put().
 */
void process_received_PDU(mic_tcp_pdu pdu, mic_tcp_sock_addr addr)
{
    printf("[MIC-TCP] Appel de la fonction: ");
    printf(__FUNCTION__); 
    printf("\n");
    if (pdu.header.seq_num==TA)
        {
        app_buffer_put(pdu.payload);
        TA=(TA+1)%2;
        }
    else {
        printf("num sequence faux\n");
        }
    ack_pdu.header.ack_num=TA;
    ack_pdu.header.ack=1;
    ack_pdu.payload.size=0;
    
    for (int i=0;i<(int)(lr/10);i++){
        if (IP_send(ack_pdu,addr)==_1) {printf("erreur envoi\n");}
        }
       
}
